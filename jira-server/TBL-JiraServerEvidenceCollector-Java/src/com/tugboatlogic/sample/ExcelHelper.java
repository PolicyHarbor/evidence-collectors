package com.tugboatlogic.sample;

import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.VerticalAlignment;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import com.tugboatlogic.sample.models.JiraQueryResponseModel;

/*
 * This method will generate an Excel spreadsheet in .xlsx format (Open XML) which can then be uploaded
 * into Tugboat Logic as an evidence file.
 * 
 * Note that the generated output Excel document is in a specific format for Jira Server evidence. The rows and
 * columns generated by this sample code are specific to Jira Server evidence, and as such, the would need to be
 * altered for use with other integrations. 
 * 
 * @param dataModel The data model containing the Jira issues that we would like to include within the Excel document
 * @param localOutputPath The local output path where we will save the Excel document for local review (optional)
 * @param jqlQuery The Jira Query Language (JQL) query that was used to query these records from Jira Server
 * @return Returns a stream containing the Excel document that has been generated
 */
public class ExcelHelper 
{
	public static ByteArrayOutputStream CreateExcelDocument(JiraQueryResponseModel dataModel, String localOutputPath, String jqlQuery) 
	{		
		// create the excel document
		Workbook workbook = new XSSFWorkbook();

		// create the primary Excel WorkSheet, with a specific name and default column widths and heights
	    Sheet worksheet = workbook.createSheet("Jira Issues");
	    worksheet.setDefaultColumnWidth(30);
	    worksheet.setDefaultRowHeightInPoints(50);
        
	    // set some basic properties of the Excel document
	    Font headerFont = workbook.createFont();
	    headerFont.setBold(true);
	    
	    // create the header styles for the generated Excel worksheet, this is for visual appearance purposes only
	    CellStyle headerCellStyle = workbook.createCellStyle();
	    headerCellStyle.setFillPattern(FillPatternType.LESS_DOTS);
	    headerCellStyle.setFont(headerFont);
	    headerCellStyle.setWrapText(true);
	    headerCellStyle.setVerticalAlignment(VerticalAlignment.BOTTOM);
	    
	    // create the data cell styles, this is for visual appearance purposes only
	    CellStyle dataCellStyle = workbook.createCellStyle();
	    dataCellStyle.setVerticalAlignment(VerticalAlignment.BOTTOM);
	    dataCellStyle.setWrapText(true);
	    
	    // build the header row for the Excel worksheet.
        // note: these specific columns are prescribed by Tugboat Logic for the Jira Server evidence format, and if this
        // sample is to be used for an integration with a platform other than Jira Server, this is where you would alter
        // the columns that would appear in the generated Excel evidence file
	    Row headerRow = worksheet.createRow(0);
	    headerRow.createCell(0).setCellValue("Issue number");
	    headerRow.createCell(1).setCellValue("Issue type");
	    headerRow.createCell(2).setCellValue("Project");
	    headerRow.createCell(3).setCellValue("Summary");
	    headerRow.createCell(4).setCellValue("Assignee");
	    headerRow.createCell(5).setCellValue("Reporter");
	    headerRow.createCell(6).setCellValue("Status");
	    headerRow.createCell(7).setCellValue("Created (create date)");
	    headerRow.createCell(8).setCellValue("Resolved (resolution date)");
	    headerRow.createCell(9).setCellValue("Issue URL");
	    
	    // set the header row style
	    for(int j = 0; j<=9; j++)
	    	headerRow.getCell(j).setCellStyle(headerCellStyle);
	    
	    // row counter
	    int rowCounter = 1;
	    
	    // loop over each of the Jira Server issues in the query results and add them to the Excel worksheet
        for (var record : dataModel.issues) 
        {        	
        	// create a new row
        	Row row = worksheet.createRow(rowCounter);
        	
        	// handle the parsing of the datetime offset
        	DateTimeFormatter customFormatter = new DateTimeFormatterBuilder()
        			   .append(DateTimeFormatter.ISO_LOCAL_DATE_TIME)
        			   .appendOffset("+HHMM","Z")
        			   .toFormatter();
        	
        	// parse dates so we can use them in the Excel file
            var parsedCreatedDateTime = customFormatter.parse(record.fields.created);
            var parsedResolutionDateTime = customFormatter.parse(record.fields.resolutiondate);
        
            // set the values for each row in the Excel worksheet
            
         	// set the Jira issue key (item number)
            row.createCell(0).setCellValue(record.key);
            
            // set the Jira issue issue type
            row.createCell(1).setCellValue(record.fields.issuetype.name);
            
            // set the Jira issue project name
            row.createCell(2).setCellValue(record.fields.project.name);
            
            // set the Jira issue summary
            row.createCell(3).setCellValue(record.fields.summary);
            
            // set the Jira issue assignee name
            row.createCell(4).setCellValue(record.fields.assignee.displayName);
            
            // set the Jira issue reporter name
            row.createCell(5).setCellValue(record.fields.reporter.displayName);
            
            // set the Jira issue status
            row.createCell(6).setCellValue(record.fields.status.name);
            
            // set the Jira issue created date
            DateTimeFormatter fmt = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            row.createCell(7).setCellValue(fmt.format(parsedCreatedDateTime));
            
            // set the Jira issue resolution date
            row.createCell(8).setCellValue(fmt.format(parsedResolutionDateTime));
            
            // set the Jira issue Url
            row.createCell(9).setCellValue(record.self);
            
            // set the data row style
    	    for(int j = 0; j<=9; j++)
    	    	row.getCell(j).setCellStyle(dataCellStyle);
    	    
    	    // increment the row counter
            rowCounter++;
        }
        
        // create the header styles for the generated Excel worksheet, this is for visual appearance purposes only
	    CellStyle detailsHeaderCellStyle = workbook.createCellStyle();
	    detailsHeaderCellStyle.setFillPattern(FillPatternType.LESS_DOTS);
	    detailsHeaderCellStyle.setWrapText(true);
	    detailsHeaderCellStyle.setVerticalAlignment(VerticalAlignment.BOTTOM);
        
        // create the report details sheet, with a specific name and default column widths and heights,
        // this is a second worksheet in the Excel file to contain details related to the evidence
        // collection and generation
        Sheet worksheetDetails = workbook.createSheet("Report Details");
        worksheetDetails.setDefaultColumnWidth(30);
        worksheetDetails.setDefaultRowHeightInPoints(30);
        
        // first, set the name/type of the evidence we are generating
        Row detailsHeaderRow0 = worksheetDetails.createRow(0);       
        detailsHeaderRow0.createCell(0).setCellValue("Generated by");
        detailsHeaderRow0.getCell(0).setCellStyle(detailsHeaderCellStyle);
        detailsHeaderRow0.createCell(1).setCellValue("Tugboat Logic® Jira Server Custom Evidence Collector");
        detailsHeaderRow0.getCell(1).setCellStyle(dataCellStyle);
        
        // set the date/time when the evidence was generated
        Row detailsHeaderRow1 = worksheetDetails.createRow(1);
        detailsHeaderRow1.createCell(0).setCellValue("Generated on");
        detailsHeaderRow1.getCell(0).setCellStyle(detailsHeaderCellStyle);
        detailsHeaderRow1.createCell(1).setCellValue(LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
        detailsHeaderRow1.getCell(1).setCellStyle(dataCellStyle);
        
        // set the date range (start) for the Jira issue query
        Row detailsHeaderRow2 = worksheetDetails.createRow(2);
        detailsHeaderRow2.createCell(0).setCellValue("Date range start");
        detailsHeaderRow2.getCell(0).setCellStyle(detailsHeaderCellStyle);
        detailsHeaderRow2.createCell(1).setCellValue(LocalDateTime.now().minusDays(90).format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
        detailsHeaderRow2.getCell(1).setCellStyle(dataCellStyle);
        
        // set the date range (end) for the Jira issue query
        Row detailsHeaderRow3 = worksheetDetails.createRow(3);
        detailsHeaderRow3.createCell(0).setCellValue("Date range end");
        detailsHeaderRow3.getCell(0).setCellStyle(detailsHeaderCellStyle);
        detailsHeaderRow3.createCell(1).setCellValue(LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
        detailsHeaderRow3.getCell(1).setCellStyle(dataCellStyle);
        
        // set the actual JQL query that is used
        Row detailsHeaderRow4 = worksheetDetails.createRow(4);
        detailsHeaderRow4.createCell(0).setCellValue("JQL");
        detailsHeaderRow4.getCell(0).setCellStyle(detailsHeaderCellStyle);
        detailsHeaderRow4.createCell(1).setCellValue(jqlQuery);
        detailsHeaderRow4.getCell(1).setCellStyle(dataCellStyle);
        
        // set the list of issue fields that are included from the Jira Server result
        Row detailsHeaderRow5 = worksheetDetails.createRow(5);
        detailsHeaderRow5.createCell(0).setCellValue("Fields requested");
        detailsHeaderRow5.getCell(0).setCellStyle(detailsHeaderCellStyle);
        detailsHeaderRow5.createCell(1).setCellValue("issuetype, project, summary, assignee, reporter, status, created, resolutiondate");
        detailsHeaderRow5.getCell(1).setCellStyle(dataCellStyle);
        
        // set the column widths to a fixed value for both columns
        worksheetDetails.setColumnWidth(0, 30*256);
        worksheetDetails.setColumnWidth(1, 100*256);
        
        // save your file to the local file system, optional
        if (localOutputPath != null && localOutputPath != "")
        {
        	// build the output path and filename
            var fileName = localOutputPath + "\\JiraServerEvidence_" + LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMddhhmmss")) + ".xlsx";
        	
            // save the Excel document to the local file system
            try (FileOutputStream outputStream = new FileOutputStream(fileName)) {
                workbook.write(outputStream);
            } catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        }
	                       
        try {
        	// create an outputstream
        	ByteArrayOutputStream out = new ByteArrayOutputStream();
        	
        	// save Excel document to the OutputStream
			workbook.write(out);
			
			return out;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        
        return null;
	}
}

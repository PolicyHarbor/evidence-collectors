using System;
using System.IO;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using SampleApp_JiraServer.Models;

namespace SampleApp_JiraServer.Helpers
{
    public class ExcelHelper
    {
        /// <summary>
        /// This method will generate an Excel spreadsheet in .xlsx format (Open XML) which can then be uploaded
        /// into Tugboat Logic as an evidence file.
        ///
        /// Note that the generated output Excel document is in a specific format for Jira Server evidence. The rows and
        /// columns generated by this sample code are specific to Jira Server evidence, and as such, the would need to be
        /// altered for use with other integrations. 
        /// </summary>
        /// <param name="dataModel">The data model containing the Jira issues that we would like to include within the Excel document</param>
        /// <param name="localOutputPath">The local output path where we will save the Excel document for local review (optional)</param>
        /// <param name="jqlQuery">The Jira Query Language (JQL) query that was used to query these records from Jira Server</param>
        /// <returns>Returns a stream containing the Excel document that has been generated</returns>
        public static Stream CreateExcelDocument(JiraQueryResponseModel dataModel, string localOutputPath, string jqlQuery)
        {
            // this sample application will use EPPlus ExcelPackage to generate an output file in Excel Open XML format
            using (ExcelPackage excelPackage = new ExcelPackage())
            {
                // set some basic properties of the Excel document
                excelPackage.Workbook.Properties.Title = "Tugboat Logic Evidence Report";
                excelPackage.Workbook.Properties.Created = DateTime.Now;

                // create the primary Excel WorkSheet, with a specific name and default column widths and heights
                ExcelWorksheet worksheet = excelPackage.Workbook.Worksheets.Add("Jira Issues");
                worksheet.DefaultColWidth = 30;
                worksheet.DefaultRowHeight = 50;
                
                // build the header row for the Excel worksheet.
                // note: these specific columns are prescribed by Tugboat Logic for the Jira Server evidence format, and if this
                // sample is to be used for an integration with a platform other than Jira Server, this is where you would alter
                // the columns that would appear in the generated Excel evidence file
                worksheet.Cells[1, 1].Value = "Issue number";
                worksheet.Cells[1, 2].Value = "Issue type";
                worksheet.Cells[1, 3].Value = "Project";
                worksheet.Cells[1, 4].Value = "Summary";
                worksheet.Cells[1, 5].Value = "Assignee";
                worksheet.Cells[1, 6].Value = "Reporter";
                worksheet.Cells[1, 7].Value = "Status";
                worksheet.Cells[1, 8].Value = "Created (create date)";
                worksheet.Cells[1, 9].Value = "Resolved (resolution date)";
                worksheet.Cells[1, 10].Value = "Issue URL";

                // set the header styles for the generated Excel worksheet, this is for visual appearance purposes only
                worksheet.Cells["A1:J1"].Style.Fill.PatternType = ExcelFillStyle.Gray125;
                worksheet.Cells["A1:J1"].Style.WrapText = true;
                worksheet.Cells["A1:J1"].Style.Font.Bold = true;
                worksheet.Cells["A1:J1"].Style.VerticalAlignment = ExcelVerticalAlignment.Bottom;

                // row counter
                int row = 2;

                // loop over each of the Jira Server issues in the query results and add them to the Excel worksheet
                foreach (var record in dataModel.issues)
                {
                    // parse dates so we can use them in the Excel file
                    var parsedCreatedDateTime = DateTime.Parse(record.fields.created);
                    var parsedResolutionDateTime = DateTime.Parse(record.fields.resolutiondate);

                    // set the values for each row in the Excel worksheet

                    // set the Jira issue key (item number)
                    worksheet.Cells[row, 1].Value = record.key;

                    // set the Jira issue issue type
                    worksheet.Cells[row, 2].Value = record.fields.issuetype?.name;

                    // set the Jira issue project name
                    worksheet.Cells[row, 3].Value = record.fields.project?.name;

                    // set the Jira issue summary
                    worksheet.Cells[row, 4].Value = record.fields.summary;

                    // set the Jira issue assignee name
                    worksheet.Cells[row, 5].Value = record.fields.assignee?.displayName;

                    // set the Jira issue reporter name
                    worksheet.Cells[row, 6].Value = record.fields.reporter?.displayName;

                    // set the Jira issue status
                    worksheet.Cells[row, 7].Value = record.fields.status?.name;

                    // set the Jira issue created date
                    worksheet.Cells[row, 8].Value = parsedCreatedDateTime.ToString("yyyy-MM-dd HH:mm:ss");

                    // set the Jira issue resolution date
                    worksheet.Cells[row, 9].Value = parsedResolutionDateTime.ToString("yyyy-MM-dd HH:mm:ss");

                    // set the Jira issue Url
                    worksheet.Cells[row, 10].Value = record.self;

                    // set the row styles, this is for visual appearance purposes only
                    worksheet.Cells[$"A{row}:J{row}"].Style.VerticalAlignment = ExcelVerticalAlignment.Bottom;
                    worksheet.Cells[$"A{row}:J{row}"].Style.WrapText = true;

                    // increment the row counter
                    row++;
                }

                // create the report details sheet, with a specific name and default column widths and heights,
                // this is a second worksheet in the Excel file to contain details related to the evidence
                // collection and generation
                ExcelWorksheet worksheetDetails = excelPackage.Workbook.Worksheets.Add("Report Details");
                worksheetDetails.DefaultColWidth = 30;
                worksheetDetails.DefaultRowHeight = 30;

                // create the first column, which will display the field names
                worksheetDetails.Cells[1, 1].Value = "Generated by";
                worksheetDetails.Cells[2, 1].Value = "Generated on";
                worksheetDetails.Cells[3, 1].Value = "Date range start";
                worksheetDetails.Cells[4, 1].Value = "Date range end";
                worksheetDetails.Cells[5, 1].Value = "JQL";
                worksheetDetails.Cells[6, 1].Value = "Fields requested";

                // create the second column

                // first, set the name/type of the evidence we are generating
                worksheetDetails.Cells[1, 2].Value = "Tugboat Logic® Jira Server Custom Evidence Collector";

                // set the date/time when the evidence was generated
                worksheetDetails.Cells[2, 2].Value = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");

                // set the date range (start/end) for the Jira issue query
                worksheetDetails.Cells[3, 2].Value = DateTime.Now.AddDays(-90).ToString("yyyy-MM-dd HH:mm:ss");
                worksheetDetails.Cells[4, 2].Value = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");

                // set the actual JQL query that is used
                worksheetDetails.Cells[5, 2].Value = jqlQuery;

                // set the list of issue fields that are included from the Jira Server result
                worksheetDetails.Cells[6, 2].Value = "issuetype, project, summary, assignee, reporter, status, created, resolutiondate";

                // set the styles on both columns, this is for visual appearance purposes only
                worksheetDetails.Cells["A1:A6"].Style.Fill.PatternType = ExcelFillStyle.Gray125;
                worksheetDetails.Cells["A1:A6"].Style.WrapText = true;
                worksheetDetails.Cells["A1:A6"].Style.VerticalAlignment = ExcelVerticalAlignment.Bottom;
                worksheetDetails.Cells["B1:B6"].Style.WrapText = true;
                worksheetDetails.Cells["B1:B6"].Style.VerticalAlignment = ExcelVerticalAlignment.Bottom;

                // set the column widths to a fixed value for both columns
                worksheetDetails.Column(1).Width = 30;
                worksheetDetails.Column(2).Width = 100;

                // save your file to the local file system, optional
                if (!string.IsNullOrEmpty(localOutputPath))
                {
                    // build the output path and filename
                    var fileName = $"{localOutputPath}\\JiraServerEvidence_{DateTime.Now.ToString("yyyyMMddThhmmss")}.xlsx";

                    // build the file info for the exported Excel document
                    FileInfo fi = new FileInfo(fileName);

                    // save the Excel document to the local file system
                    excelPackage.SaveAs(fi);
                }

                // we need a MemoryStream to save the generated Excel document to
                var outputStream = new MemoryStream();

                // save Excel document to the MemoryStream
                excelPackage.SaveAs(outputStream);

                // reset the MemoryStream position to zero
                outputStream.Position = 0;

                return outputStream;
            }
        }
    }
}

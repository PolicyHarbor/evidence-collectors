using System.Collections.Generic;
using System.IO;
using System.Text;
using SampleApp_GithubEnterpriseServer.Models;

namespace SampleApp_GithubEnterpriseServer.Helpers
{
    public class CsvHelper
    {
        /// <summary>
        /// This method will generate a file in csv format which can then be uploaded
        /// into Tugboat Logic as an evidence file.
        /// 
        /// Note that the generated output .csv document is in a specific format for Github Enterprise Server evidence. The rows and
        /// columns generated by this sample code are specific to Github Enterprise Server evidence, and as such, the would need to be
        /// altered for use with other integrations. 
        /// </summary>
        /// <param name="pullRequest">The data model containing the Github Server pull request that we would like to include within the .csv document</param>
        /// <param name="localOutputPath">The local output path where we will save the .csv document for local review (optional)</param>
        /// <param name="comments">Comments associated with the pull request</param>
        /// <param name="reviews">Review comments associated with the pull request</param>
        /// <returns>Returns a stream containing the .csv document that has been generated</returns>
        public static Stream CreateCsvDocument(string localOutputPath, GitHubPullRequestResponseModel pullRequest, GitHubPullRequestCommentsResponseModel[] comments, GitHubPullRequestReviewsResponseModel[] reviews)
        {
            var sb = new StringBuilder();

            // heading
            sb.AppendLine("Pull Request Details,");
            sb.AppendLine("------------------------------------,");

            // set the pull request ID
            sb.AppendLine($"Pull Request ID:,{pullRequest.node_id}");

            // set the pull request URL
            sb.AppendLine($"Pull Request URL:,{pullRequest.html_url}");

            // set the pull request message
            sb.AppendLine($"Pull Request Description:,\"{pullRequest.body}\"");

            // set the date/time when the pull request was created
            sb.AppendLine($"Pull Request Created At:,{pullRequest.created_at.ToUniversalTime():yyyy-MM-ddTHH:mm:ssZ}");
            sb.AppendLine("");

            // set the pull request author name
            sb.AppendLine($"Author Name:,{pullRequest.user.login}");

            // set the pull request author profile
            sb.AppendLine($"Author Profile:,{pullRequest.user.html_url}");
            sb.AppendLine("");

            // set the head repository
            sb.AppendLine($"Incoming (Head) Repository:,{pullRequest.head.repo.full_name}");

            // set the incoming ref name
            sb.AppendLine($"Incoming Ref Name:,{pullRequest.head.@ref}");

            // set the incoming commit
            sb.AppendLine($"Incoming Commit:,{pullRequest.head.sha}");
            sb.AppendLine("");

            // heading
            sb.AppendLine("Code Review Outcome,");
            sb.AppendLine("------------------------------------,");
            sb.AppendLine("");

            // set the merged by
            sb.AppendLine($"Merged By:,{pullRequest.merged_by.login}");

            // set the merged by profile
            sb.AppendLine($"Merged By Profile:,{pullRequest.merged_by.html_url}");

            // set the merged at date
            sb.AppendLine($"Merged At:,{pullRequest.merged_at.ToUniversalTime():yyyy-MM-ddTHH:mm:ssZ}");
            sb.AppendLine("");

            // set the target repository
            sb.AppendLine($"Target (Base) Repository:,{pullRequest.@base.repo.full_name}");

            // set the target ref name
            sb.AppendLine($"Target Ref Name:,{pullRequest.@base.@ref}");

            // set the target commit
            sb.AppendLine($"Target Commit:,{pullRequest.@base.sha}");
            sb.AppendLine("");

            // set the latest reviews
            sb.AppendLine($"Latest Reviews:,\"{FormatReviews(reviews)}\"");

            // set the latest comments
            sb.AppendLine($"Latest Comments:,\"{FormatComments(comments)}\"");
            
            // save your file to the local file system, optional
            if (!string.IsNullOrEmpty(localOutputPath))
            {
                // build the output path and filename
                var fileName = $"{localOutputPath}\\pull_request-{pullRequest.node_id}.csv";

                // save the csv text to the local file system
                File.WriteAllText(fileName, sb.ToString());
            }

            // we need a MemoryStream to save the generated csv document to
            var outputStream = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(sb.ToString()));

            // reset the MemoryStream position to zero
            outputStream.Position = 0;

            return outputStream;
        }

        /// <summary>
        /// This helper method will format the comments for CSV output
        /// </summary>
        /// <param name="comments">The list of comments queried from the GitHub Server</param>
        /// <returns>Returns the string representation of the comments.</returns>
        private static string FormatComments(GitHubPullRequestCommentsResponseModel[] comments)
        {
            // create an empty list of strings
            var results = new List<string>();

            // loop over each comment and add the formatted text to the list of strings
            foreach(var comment in comments)
            {
                results.Add($"By {comment.author_association} {comment.user.login} ({comment.user.html_url}) on {comment.created_at.ToUniversalTime():yyyy-MM-ddTHH:mm:ssZ}:\n\n{comment.body}\n");
            }

            // join the strings together and return
            return string.Join("\n", results);
        }

        /// <summary>
        /// This helper method will format the reviews for CSV output
        /// </summary>
        /// <param name="reviews">The list of review comments queried from the GitHub Server</param>
        /// <returns>Returns the string representation of the reviews.</returns>
        private static string FormatReviews(GitHubPullRequestReviewsResponseModel[] reviews)
        {
            // create an empty list of strings
            var results = new List<string>();

            // loop over each comment and add the formatted text to the list of strings
            foreach (var review in reviews)
            {
                results.Add($"{review.state} by {review.author_association} {review.user.login} ({review.user.html_url}) on {review.submitted_at.ToUniversalTime():yyyy-MM-ddTHH:mm:ssZ}:\n\n{review.body}\n");
            }

            // join the strings together and return
            return string.Join("\n", results);
        }
    }
}
